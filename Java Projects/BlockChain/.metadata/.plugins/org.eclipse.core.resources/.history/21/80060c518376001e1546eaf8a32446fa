import java.io.File;
import java.io.FileNotFoundException;
import java.util.Scanner;
import java.security.MessageDigest;
import java.nio.charset.StandardCharsets;

/**
 * A class for Utilities used by other classes.
 */
public final class Utilities
{
	/**
     * Reads the transactions from a text file and adds them to a priority queue.
     * @param pgmFile is the filename of the text file.
     * @return a PriorityLine transactions loaded into it.
     */
	public static PriorityLine<Transaction> loadTransactions(String pgmFile)    
	{
    	File file = new File(pgmFile);
    	
    	PriorityLine<Transaction> returnval = new PriorityLine<>();
    	
        try 
        {
			Scanner scnr = new Scanner(file);
			
			while(scnr.hasNextLine())
			{				
				
				String sender = scnr.next();
				String receiver = scnr.next();
				int amount = Integer.parseInt(scnr.next());
				int fee = Integer.parseInt(scnr.next());
				
				Transaction tran = new Transaction(sender, receiver, amount, fee);
				
				returnval.enqueue(tran);
				
				scnr.nextLine();
			}
        }
        catch (Exception e) 
        {
        	return null;
		}
        
    	return returnval;
    }
	
	/**
     * verifies that Transaction exists in a block.
     * TIME COMPLEXITY REQUIREMENT: O(logN).
     * @param t is the transaction that we want to verify it's contained in a certain block.
     * @param blockRootHash is the root hash code stored in the respective block.
     * @param proof is the list of hashes extracted with the method extractProof.
     * @return true if the transaction is verified, false otherwise.
     */
	public static boolean verifyTransaction(Transaction t, SinglyLinkedList<String> proof, String blockRootHash)
    {
    	return true;
    }

    /**
     * SHA-256 cryptographic hash function for a single inputN).
     * @param input the string that will be hashed.
     * @return a cryptographic hash.
     */
    public static String cryptographicHashFunction(String input)
    {
        StringBuilder hexString = null;

        try
        {
            MessageDigest digest = MessageDigest.getInstance("SHA-256");
            byte[] encodedhash = digest.digest(input.getBytes(StandardCharsets.UTF_8));
            hexString = new StringBuilder(2 * encodedhash.length);
            for (int i = 0; i < encodedhash.length; i++)
            {
                String hex = Integer.toHexString(0xff & encodedhash[i]);
                if(hex.length() == 1) {
                    hexString.append('0');
                }
                hexString.append(hex);
            }
            
        }
        catch(Exception e)
        {
            System.err.println(e.getMessage());
        }

        return hexString.toString();
    }
    
    /**
     * SHA-256 cryptographic hash function for a pair of inputs.
     * It uses the XOR bitwise operator to merge the two hash codes.
     * @param input1 A string representing a hashcode.
     * @param input2 Another string representing a hashcode.
     * @return A combined hashcode.
     */
    public static String cryptographicHashFunction(String input1, String input2)
    {
        StringBuilder hexString = null;

        try
        {
            MessageDigest digest = MessageDigest.getInstance("SHA-256");
            byte[] encodedhash1 = digest.digest(input1.getBytes(StandardCharsets.UTF_8));
            byte[] encodedhash2 = digest.digest(input2.getBytes(StandardCharsets.UTF_8));
            hexString = new StringBuilder(2 * encodedhash1.length);
            for (int i = 0; i < encodedhash1.length; i++)
            {
                String hex = Integer.toHexString(0xff & (encodedhash1[i] ^ encodedhash2[i]) );
                if(hex.length() == 1) {
                    hexString.append('0');
                }
                hexString.append(hex);
            }
        }
        catch(Exception e)
        {
            System.err.println(e.getMessage());
        }

        return hexString.toString();
    }

}
